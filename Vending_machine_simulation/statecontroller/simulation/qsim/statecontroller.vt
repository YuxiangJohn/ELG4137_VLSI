// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/01/2016 17:25:32"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    statecontroller
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module statecontroller_vlg_sample_tst(
	C,
	clk,
	CO,
	EQ,
	reset,
	S,
	sampler_tx
);
input  C;
input  clk;
input  CO;
input  EQ;
input  reset;
input [7:0] S;
output sampler_tx;

reg sample;
time current_time;
always @(C or clk or CO or EQ or reset or S)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module statecontroller_vlg_check_tst (
	adder_c,
	M_c,
	o,
	sub_c,
	sampler_rx
);
input  adder_c;
input  M_c;
input [2:0] o;
input  sub_c;
input sampler_rx;

reg  adder_c_expected;
reg  M_c_expected;
reg [2:0] o_expected;
reg  sub_c_expected;

reg  adder_c_prev;
reg  M_c_prev;
reg [2:0] o_prev;
reg  sub_c_prev;

reg  adder_c_expected_prev;
reg  M_c_expected_prev;
reg [2:0] o_expected_prev;
reg  sub_c_expected_prev;

reg  last_adder_c_exp;
reg  last_M_c_exp;
reg [2:0] last_o_exp;
reg  last_sub_c_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:4] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 4'b1;
end

// update real /o prevs

always @(trigger)
begin
	adder_c_prev = adder_c;
	M_c_prev = M_c;
	o_prev = o;
	sub_c_prev = sub_c;
end

// update expected /o prevs

always @(trigger)
begin
	adder_c_expected_prev = adder_c_expected;
	M_c_expected_prev = M_c_expected;
	o_expected_prev = o_expected;
	sub_c_expected_prev = sub_c_expected;
end



// expected M_c
initial
begin
	M_c_expected = 1'bX;
end 

// expected sub_c
initial
begin
	sub_c_expected = 1'bX;
end 

// expected adder_c
initial
begin
	adder_c_expected = 1'bX;
end 
// expected o[ 2 ]
initial
begin
	o_expected[2] = 1'bX;
end 
// expected o[ 1 ]
initial
begin
	o_expected[1] = 1'bX;
end 
// expected o[ 0 ]
initial
begin
	o_expected[0] = 1'bX;
end 
// generate trigger
always @(adder_c_expected or adder_c or M_c_expected or M_c or o_expected or o or sub_c_expected or sub_c)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected adder_c = %b | expected M_c = %b | expected o = %b | expected sub_c = %b | ",adder_c_expected_prev,M_c_expected_prev,o_expected_prev,sub_c_expected_prev);
	$display("| real adder_c = %b | real M_c = %b | real o = %b | real sub_c = %b | ",adder_c_prev,M_c_prev,o_prev,sub_c_prev);
`endif
	if (
		( adder_c_expected_prev !== 1'bx ) && ( adder_c_prev !== adder_c_expected_prev )
		&& ((adder_c_expected_prev !== last_adder_c_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port adder_c :: @time = %t",  $realtime);
		$display ("     Expected value = %b", adder_c_expected_prev);
		$display ("     Real value = %b", adder_c_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_adder_c_exp = adder_c_expected_prev;
	end
	if (
		( M_c_expected_prev !== 1'bx ) && ( M_c_prev !== M_c_expected_prev )
		&& ((M_c_expected_prev !== last_M_c_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port M_c :: @time = %t",  $realtime);
		$display ("     Expected value = %b", M_c_expected_prev);
		$display ("     Real value = %b", M_c_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_M_c_exp = M_c_expected_prev;
	end
	if (
		( o_expected_prev[0] !== 1'bx ) && ( o_prev[0] !== o_expected_prev[0] )
		&& ((o_expected_prev[0] !== last_o_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_expected_prev);
		$display ("     Real value = %b", o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_o_exp[0] = o_expected_prev[0];
	end
	if (
		( o_expected_prev[1] !== 1'bx ) && ( o_prev[1] !== o_expected_prev[1] )
		&& ((o_expected_prev[1] !== last_o_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_expected_prev);
		$display ("     Real value = %b", o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_o_exp[1] = o_expected_prev[1];
	end
	if (
		( o_expected_prev[2] !== 1'bx ) && ( o_prev[2] !== o_expected_prev[2] )
		&& ((o_expected_prev[2] !== last_o_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_expected_prev);
		$display ("     Real value = %b", o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_o_exp[2] = o_expected_prev[2];
	end
	if (
		( sub_c_expected_prev !== 1'bx ) && ( sub_c_prev !== sub_c_expected_prev )
		&& ((sub_c_expected_prev !== last_sub_c_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sub_c :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sub_c_expected_prev);
		$display ("     Real value = %b", sub_c_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_sub_c_exp = sub_c_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module statecontroller_vlg_vec_tst();
// constants                                           
// general purpose registers
reg C;
reg clk;
reg CO;
reg EQ;
reg reset;
reg [7:0] S;
// wires                                               
wire adder_c;
wire M_c;
wire [2:0] o;
wire sub_c;

wire sampler;                             

// assign statements (if any)                          
statecontroller i1 (
// port map - connection between master ports and signals/registers   
	.adder_c(adder_c),
	.C(C),
	.clk(clk),
	.CO(CO),
	.EQ(EQ),
	.M_c(M_c),
	.o(o),
	.reset(reset),
	.S(S),
	.sub_c(sub_c)
);

// clk
always
begin
	clk = 1'b0;
	clk = #20000 1'b1;
	#20000;
end 

// C
initial
begin
	C = 1'b0;
	C = #260000 1'b1;
	C = #20000 1'b0;
end 

// reset
initial
begin
	reset = 1'b1;
	reset = #120000 1'b0;
end 
// S[ 7 ]
initial
begin
	S[7] = 1'b0;
end 
// S[ 6 ]
initial
begin
	S[6] = 1'b0;
end 
// S[ 5 ]
initial
begin
	S[5] = 1'b0;
end 
// S[ 4 ]
initial
begin
	S[4] = 1'b0;
end 
// S[ 3 ]
initial
begin
	S[3] = 1'b0;
end 
// S[ 2 ]
initial
begin
	S[2] = 1'b0;
end 
// S[ 1 ]
initial
begin
	S[1] = 1'b0;
end 
// S[ 0 ]
initial
begin
	S[0] = 1'b0;
end 

// CO
initial
begin
	CO = 1'b0;
end 

// EQ
initial
begin
	EQ = 1'b0;
	EQ = #300000 1'b1;
	EQ = #20000 1'b0;
end 

statecontroller_vlg_sample_tst tb_sample (
	.C(C),
	.clk(clk),
	.CO(CO),
	.EQ(EQ),
	.reset(reset),
	.S(S),
	.sampler_tx(sampler)
);

statecontroller_vlg_check_tst tb_out(
	.adder_c(adder_c),
	.M_c(M_c),
	.o(o),
	.sub_c(sub_c),
	.sampler_rx(sampler)
);
endmodule

