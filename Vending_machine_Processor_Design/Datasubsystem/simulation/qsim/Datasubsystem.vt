// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/02/2016 16:57:38"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Datasubsystem
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Datasubsystem_vlg_sample_tst(
	C,
	choice,
	clk,
	reset,
	S0,
	S1,
	V,
	sampler_tx
);
input  C;
input  choice;
input  clk;
input  reset;
input [7:0] S0;
input [7:0] S1;
input [7:0] V;
output sampler_tx;

reg sample;
time current_time;
always @(C or choice or clk or reset or S0 or S1 or V)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Datasubsystem_vlg_check_tst (
	CO,
	DO,
	E,
	EQ,
	sampler_rx
);
input  CO;
input  DO;
input [7:0] E;
input  EQ;
input sampler_rx;

reg  CO_expected;
reg  DO_expected;
reg [7:0] E_expected;
reg  EQ_expected;

reg  CO_prev;
reg  DO_prev;
reg [7:0] E_prev;
reg  EQ_prev;

reg  CO_expected_prev;
reg  DO_expected_prev;
reg [7:0] E_expected_prev;
reg  EQ_expected_prev;

reg  last_CO_exp;
reg  last_DO_exp;
reg [7:0] last_E_exp;
reg  last_EQ_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:4] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 4'b1;
end

// update real /o prevs

always @(trigger)
begin
	CO_prev = CO;
	DO_prev = DO;
	E_prev = E;
	EQ_prev = EQ;
end

// update expected /o prevs

always @(trigger)
begin
	CO_expected_prev = CO_expected;
	DO_expected_prev = DO_expected;
	E_expected_prev = E_expected;
	EQ_expected_prev = EQ_expected;
end


// expected E[ 7 ]
initial
begin
	E_expected[7] = 1'bX;
end 
// expected E[ 6 ]
initial
begin
	E_expected[6] = 1'bX;
end 
// expected E[ 5 ]
initial
begin
	E_expected[5] = 1'bX;
end 
// expected E[ 4 ]
initial
begin
	E_expected[4] = 1'bX;
end 
// expected E[ 3 ]
initial
begin
	E_expected[3] = 1'bX;
end 
// expected E[ 2 ]
initial
begin
	E_expected[2] = 1'bX;
end 
// expected E[ 1 ]
initial
begin
	E_expected[1] = 1'bX;
end 
// expected E[ 0 ]
initial
begin
	E_expected[0] = 1'bX;
end 

// expected CO
initial
begin
	CO_expected = 1'bX;
end 

// expected DO
initial
begin
	DO_expected = 1'bX;
end 

// expected EQ
initial
begin
	EQ_expected = 1'bX;
end 
// generate trigger
always @(CO_expected or CO or DO_expected or DO or E_expected or E or EQ_expected or EQ)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected CO = %b | expected DO = %b | expected E = %b | expected EQ = %b | ",CO_expected_prev,DO_expected_prev,E_expected_prev,EQ_expected_prev);
	$display("| real CO = %b | real DO = %b | real E = %b | real EQ = %b | ",CO_prev,DO_prev,E_prev,EQ_prev);
`endif
	if (
		( CO_expected_prev !== 1'bx ) && ( CO_prev !== CO_expected_prev )
		&& ((CO_expected_prev !== last_CO_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CO :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CO_expected_prev);
		$display ("     Real value = %b", CO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_CO_exp = CO_expected_prev;
	end
	if (
		( DO_expected_prev !== 1'bx ) && ( DO_prev !== DO_expected_prev )
		&& ((DO_expected_prev !== last_DO_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DO :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DO_expected_prev);
		$display ("     Real value = %b", DO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DO_exp = DO_expected_prev;
	end
	if (
		( E_expected_prev[0] !== 1'bx ) && ( E_prev[0] !== E_expected_prev[0] )
		&& ((E_expected_prev[0] !== last_E_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port E[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", E_expected_prev);
		$display ("     Real value = %b", E_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_E_exp[0] = E_expected_prev[0];
	end
	if (
		( E_expected_prev[1] !== 1'bx ) && ( E_prev[1] !== E_expected_prev[1] )
		&& ((E_expected_prev[1] !== last_E_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port E[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", E_expected_prev);
		$display ("     Real value = %b", E_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_E_exp[1] = E_expected_prev[1];
	end
	if (
		( E_expected_prev[2] !== 1'bx ) && ( E_prev[2] !== E_expected_prev[2] )
		&& ((E_expected_prev[2] !== last_E_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port E[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", E_expected_prev);
		$display ("     Real value = %b", E_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_E_exp[2] = E_expected_prev[2];
	end
	if (
		( E_expected_prev[3] !== 1'bx ) && ( E_prev[3] !== E_expected_prev[3] )
		&& ((E_expected_prev[3] !== last_E_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port E[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", E_expected_prev);
		$display ("     Real value = %b", E_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_E_exp[3] = E_expected_prev[3];
	end
	if (
		( E_expected_prev[4] !== 1'bx ) && ( E_prev[4] !== E_expected_prev[4] )
		&& ((E_expected_prev[4] !== last_E_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port E[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", E_expected_prev);
		$display ("     Real value = %b", E_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_E_exp[4] = E_expected_prev[4];
	end
	if (
		( E_expected_prev[5] !== 1'bx ) && ( E_prev[5] !== E_expected_prev[5] )
		&& ((E_expected_prev[5] !== last_E_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port E[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", E_expected_prev);
		$display ("     Real value = %b", E_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_E_exp[5] = E_expected_prev[5];
	end
	if (
		( E_expected_prev[6] !== 1'bx ) && ( E_prev[6] !== E_expected_prev[6] )
		&& ((E_expected_prev[6] !== last_E_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port E[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", E_expected_prev);
		$display ("     Real value = %b", E_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_E_exp[6] = E_expected_prev[6];
	end
	if (
		( E_expected_prev[7] !== 1'bx ) && ( E_prev[7] !== E_expected_prev[7] )
		&& ((E_expected_prev[7] !== last_E_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port E[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", E_expected_prev);
		$display ("     Real value = %b", E_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_E_exp[7] = E_expected_prev[7];
	end
	if (
		( EQ_expected_prev !== 1'bx ) && ( EQ_prev !== EQ_expected_prev )
		&& ((EQ_expected_prev !== last_EQ_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EQ :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EQ_expected_prev);
		$display ("     Real value = %b", EQ_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_EQ_exp = EQ_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Datasubsystem_vlg_vec_tst();
// constants                                           
// general purpose registers
reg C;
reg choice;
reg clk;
reg reset;
reg [7:0] S0;
reg [7:0] S1;
reg [7:0] V;
// wires                                               
wire CO;
wire DO;
wire [7:0] E;
wire EQ;

wire sampler;                             

// assign statements (if any)                          
Datasubsystem i1 (
// port map - connection between master ports and signals/registers   
	.C(C),
	.choice(choice),
	.clk(clk),
	.CO(CO),
	.\DO (DO),
	.E(E),
	.EQ(EQ),
	.reset(reset),
	.S0(S0),
	.S1(S1),
	.V(V)
);

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 

// reset
initial
begin
	reset = 1'b1;
	reset = #80000 1'b0;
end 

// choice
initial
begin
	choice = 1'b0;
	choice = #130000 1'b1;
	choice = #10000 1'b0;
	choice = #10000 1'b1;
	choice = #10000 1'b0;
	choice = #10000 1'b1;
	choice = #10000 1'b0;
	choice = #10000 1'b1;
	choice = #10000 1'b0;
	choice = #10000 1'b1;
	choice = #10000 1'b0;
end 

// C
initial
begin
	C = 1'b0;
end 
// V[ 7 ]
initial
begin
	V[7] = 1'b0;
end 
// V[ 6 ]
initial
begin
	V[6] = 1'b0;
end 
// V[ 5 ]
initial
begin
	V[5] = 1'b0;
end 
// V[ 4 ]
initial
begin
	V[4] = 1'b0;
end 
// V[ 3 ]
initial
begin
	V[3] = 1'b0;
end 
// V[ 2 ]
initial
begin
	V[2] = 1'b0;
end 
// V[ 1 ]
initial
begin
	V[1] = 1'b0;
end 
// V[ 0 ]
initial
begin
	V[0] = 1'b0;
	V[0] = #130000 1'b1;
	V[0] = #10000 1'b0;
	V[0] = #10000 1'b1;
	V[0] = #10000 1'b0;
	V[0] = #10000 1'b1;
	V[0] = #10000 1'b0;
	V[0] = #10000 1'b1;
	V[0] = #10000 1'b0;
	V[0] = #10000 1'b1;
	V[0] = #10000 1'b0;
end 
// S0[ 7 ]
initial
begin
	S0[7] = 1'b0;
end 
// S0[ 6 ]
initial
begin
	S0[6] = 1'b0;
end 
// S0[ 5 ]
initial
begin
	S0[5] = 1'b0;
end 
// S0[ 4 ]
initial
begin
	S0[4] = 1'b0;
end 
// S0[ 3 ]
initial
begin
	S0[3] = 1'b0;
end 
// S0[ 2 ]
initial
begin
	S0[2] = 1'b1;
end 
// S0[ 1 ]
initial
begin
	S0[1] = 1'b0;
end 
// S0[ 0 ]
initial
begin
	S0[0] = 1'b0;
end 
// S1[ 7 ]
initial
begin
	S1[7] = 1'b0;
end 
// S1[ 6 ]
initial
begin
	S1[6] = 1'b0;
end 
// S1[ 5 ]
initial
begin
	S1[5] = 1'b0;
end 
// S1[ 4 ]
initial
begin
	S1[4] = 1'b0;
end 
// S1[ 3 ]
initial
begin
	S1[3] = 1'b0;
end 
// S1[ 2 ]
initial
begin
	S1[2] = 1'b1;
end 
// S1[ 1 ]
initial
begin
	S1[1] = 1'b0;
end 
// S1[ 0 ]
initial
begin
	S1[0] = 1'b0;
end 

Datasubsystem_vlg_sample_tst tb_sample (
	.C(C),
	.choice(choice),
	.clk(clk),
	.reset(reset),
	.S0(S0),
	.S1(S1),
	.V(V),
	.sampler_tx(sampler)
);

Datasubsystem_vlg_check_tst tb_out(
	.CO(CO),
	.DO(DO),
	.E(E),
	.EQ(EQ),
	.sampler_rx(sampler)
);
endmodule

